# Reusuable dockerhub action
name: Load Image from Dockerhub and Run Cypress

on:
  workflow_call:
    inputs:
      DOCKER_TAG:
        type: string
        required: true
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

# jobs:
#   run_cypress:
#     runs-on: ubuntu-latest

jobs:
  run_cypress:
    runs-on: ubuntu-latest
    # all services are in a single docker network, so they will be able to communicate,
    # if the tester is run in a container no ports need to be exposed and host names are
    # equivalent to the service id below
    # cypress/browsers:node16.5.0-chrome97-ff96
    container: cypress/included:9.5.1

    services:
      redis:
        image: redis:5.0-alpine
        ports:
          - 6379
      postgres:
        image: postgres:11.14-alpine
        ports:
          - 5432
      maildev:
        image: maildev/maildev:1.1.0
        ports:
          - 80
      elasticsearch:
        image: elasticsearch:7.8.1
        ports:
          - 9200
        env:
          discovery.type: single-node
      web-app:
        image: ${{ inputs.DOCKER_TAG }}
        ports:
          - 3000
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run
        run: cypress run --spec "cypress/integration/1-getting-started/*"
        env:
        # NOTE in the CI pipeline the services are exposed via docker network as the service id (name)
          CYPRESS_HOST: http://web-app
